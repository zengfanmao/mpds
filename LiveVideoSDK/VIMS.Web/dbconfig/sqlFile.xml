<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="GRGcms.Web" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <alias>
    <typeAlias alias="userGps" type="VIMS.LiveVideoSDK.Model.GpsModel" />
    <typeAlias alias="dept" type="VIMS.LiveVideoSDK.Model.DeptModel" />
    <typeAlias alias="userGroup" type="VIMS.LiveVideoSDK.Model.UserGroupModel" />
    <typeAlias alias="user" type="VIMS.LiveVideoSDK.Model.UserModel" />
    <typeAlias alias="userResult" type="VIMS.LiveVideoSDK.Bll.Entity.tbUser" />
    <typeAlias alias="userGpsData" type="VIMS.LiveVideoSDK.Bll.Entity.tbUserIMData" />
    <typeAlias alias="record" type="VIMS.LiveVideoSDK.Model.RecordingModel" />
    <typeAlias alias="rankGroup" type="VIMS.LiveVideoSDK.Model.RankGroupModel" />
    <typeAlias alias="caseMsg" type="VIMS.LiveVideoSDK.Bll.Entity.tbCaseMessage" />
    <typeAlias alias="discussionGroup" type="VIMS.LiveVideoSDK.Bll.Entity.tbDiscussionGroup" />
  </alias>
  
  <statements>
    <select id="select_gps_data" parameterClass="userGps" resultClass="userGps">
      SELECT a.ID,a.uCode as UserCode, a.longitude as Longitude,
      a.latitude as Latitdue, b.uName as UserName, b.uDepartment, b.purpose, 
      b.dCode as dCode, b.dName as dName, b.groupName as DiscussionName,
      b.groupid as DiscussionCode, b.devicetype as GpsTargetType, b.status as status,
      a.LastModifyTime as GpsTime
      FROM tbUserIMDatas a inner join tbUsers b on a.uCode = b.uCode
      <dynamic prepend="where">
        <isNotEmpty property="DiscussionCode" prepend="and">
          <isNotEmpty property="CaseCode">
            (b.groupid = #DiscussionCode# or b.groupid = #CaseCode#)
          </isNotEmpty>
          <isEmpty property="CaseCode">
            b.groupid = #DiscussionCode#
          </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="dCode" prepend="and">
          b.dCode = #dCode#
        </isNotEmpty>
        <isNotEmpty property="CaseName" prepend="and">
          (b.uCode like CONCAT('%',#CaseName#,'%') or b.groupName like CONCAT('%',#CaseName#,'%') or b.uName like CONCAT('%',#CaseName#,'%') or b.dName like CONCAT('%',#CaseName#,'%'))
        </isNotEmpty>
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <select id="select_child_dept" parameterClass="dept" resultClass="dept">
      SELECT a.dCode,a.dName,a.dFather,
      alluser as allcount,
      onlineuser as onlinecount
      FROM tbdepartments a
      WHERE a.dFather = #dFather#
    </select>

    <select id="select_dept" parameterClass="dept" resultClass="dept">
      SELECT a.isDel,a.recSN,a.dCode,a.dName,a.dFather,a.dDesc,a.ID,a.sort_id,a.createtime,a.updatetime,a.farther,
      alluser as allcount,
      onlineuser as onlinecount
      FROM tbdepartments a
      WHERE a.dCode = #dCode#
    </select>

    <select id="select_user_group" parameterClass="userGroup" resultClass="userGroup">
      SELECT a.groupid,a.groupName,a.type,a.account,a.name,a.dept,a.deptid,a.createtime,a.updatetime,a.isdefault,b.relativegroupid,
      CASE b.relativegroupid WHEN b.relativegroupid THEN '1' ELSE '0' END as related,
      (SELECT t.receive FROM mpds_msg_count t WHERE t.ucode = a.groupid AND t.type = 'Group') as uIsUnilt,
      b.usercount as userCount
      FROM mpds_group_user a
      INNER JOIN tbDiscussionGroups b
      ON a.groupid = b.discussionCode
      <dynamic prepend="where">
        <isNotEmpty property="account" prepend="and">
          a.account = #account#
        </isNotEmpty>
        <isNotEmpty property="isdefault" prepend="and">
          a.isdefault = #isdefault#
        </isNotEmpty>
        <isNotEmpty property="groupid" prepend="and">
          a.groupid like CONCAT('%',#groupid#,'%')
        </isNotEmpty>
        <isNotEmpty property="groupName" prepend="and">
          a.groupName like CONCAT('%',#groupName#,'%')
        </isNotEmpty>
        AND b.isDel = 0 AND b.type = 'APP'
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <select id="select_rank_user_group" parameterClass="userGroup" resultMap="rank_group_result">
      SELECT c.rank,c.rankName,
      a.groupid,a.groupName,a.type,a.account,a.name,a.dept,a.deptid,a.isdefault,b.relativegroupid,
      CASE b.relativegroupid WHEN b.relativegroupid THEN '1' ELSE '0' END as related,
      (SELECT t.receive FROM mpds_msg_count t WHERE t.ucode = a.groupid AND t.type = 'Group') as uIsUnilt,
      b.usercount as userCount
      FROM mpds_rank_group c
      INNER JOIN mpds_group_user a ON a.groupid = c.discussionCode
      INNER JOIN tbDiscussionGroups b ON a.groupid = b.discussionCode
      <dynamic prepend="where">
        <isNotEmpty property="account" prepend="and">
          a.account = #account#
        </isNotEmpty>
        <isNotEmpty property="isdefault" prepend="and">
          a.isdefault = #isdefault#
        </isNotEmpty>
        <isNotEmpty property="groupid" prepend="and">
          a.groupid like CONCAT('%',#groupid#,'%')
        </isNotEmpty>
        <isNotEmpty property="groupName" prepend="and">
          a.groupName like CONCAT('%',#groupName#,'%')
        </isNotEmpty>
        <isNotEmpty property="rankNo" prepend="and">
          c.rank = #rankNo#
        </isNotEmpty>
        AND b.isDel = 0 AND b.type = 'APP'
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <select id="select_rank_user_group_clazz" parameterClass="userGroup" resultMap="rank_group_result">
      SELECT c.rank,c.rankName, b.discussionCode as groupid, b.discussionName as groupName,b.type,b.relativegroupid,#isdefault# as isdefault,
      CASE b.relativegroupid WHEN b.relativegroupid THEN '1' ELSE '0' END as related,
      (SELECT t.receive FROM mpds_msg_count t WHERE t.ucode = b.discussionCode AND t.type = 'Group') as uIsUnilt,
      b.usercount as userCount
      FROM mpds_rank_group c
      INNER JOIN tbDiscussionGroups b ON c.discussionCode = b.discussionCode and b.isDel = 0 AND b.type = 'APP' AND b.clazz = 0
      <dynamic prepend="where">
        <isNotEmpty property="account" prepend="and">
          b.discussionCode not in (select groupid from mpds_group_user a where a.account = #account# and a.isdefault = '1')
        </isNotEmpty>
        <isNotEmpty property="groupid" prepend="and">
          b.discussionCode like CONCAT('%',#groupid#,'%')
        </isNotEmpty>
        <isNotEmpty property="groupName" prepend="and">
          b.discussionName like CONCAT('%',#groupName#,'%')
        </isNotEmpty>
        <isNotEmpty property="rankNo" prepend="and">
          c.rank = #rankNo#
        </isNotEmpty>
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>
    
    <select id="select_rank" parameterClass="userGroup" resultMap="rank_result">
      SELECT distinct c.rank,c.rankName
      FROM mpds_rank_group c
      INNER JOIN mpds_group_user a ON a.groupid = c.discussionCode
      <dynamic prepend="where">
        <isNotEmpty property="account" prepend="and">
          a.account = #account#
        </isNotEmpty>
        <isNotEmpty property="isdefault" prepend="and">
          a.isdefault = #isdefault#
        </isNotEmpty>
        <isNotEmpty property="rankNo" prepend="and">
          c.rank = #rankNo#
        </isNotEmpty>
        AND a.type = 'APP'
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <select id="select_rank_clazz" parameterClass="userGroup" resultMap="rank_result">
      SELECT distinct c.rank,c.rankName
      FROM mpds_rank_group c
      <dynamic prepend="where">
        <isNotEmpty property="rankNo" prepend="and">
          c.rank = #rankNo#
        </isNotEmpty>
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <update id="update_user_default_group" parameterClass="userGroup">
      UPDATE mpds_group_user SET isdefault = #isdefault# WHERE account = #account# AND groupid = #groupid#
    </update>

    <delete id="delete_user_default_group" parameterClass="userGroup">
      DELETE FROM mpds_group_user WHERE account = #account# AND groupid = #groupid#
    </delete>

    <insert id="insert_user_default_group" parameterClass="userGroup">
      INSERT INTO mpds_group_user (groupName, groupid, type, account, name, createtime, isdefault)
      VALUES (#groupName#, #groupid#, #type#, #account#, #name#, #createtime#, #isdefault#)
    </insert>
    
    <select id="search_user_by_param"  parameterClass="user" resultClass="userResult">
      SELECT m.uCode,m.uName,m.dCode,m.uTel,m.uShortNum,m.uHeadPortrait,
      m.dName,m.LYCID,m.lastLoginTime,m.Createtime,m.accountType,m.uDepartment, m.purpose,
      m.uUnitCode,m.roleid,m.roleType,m.groupid,m.groupName,m.deviceid,m.deviceESN,m.devicetype,m.`status`,
      (SELECT sum(a.send) FROM mpds_msg_count a
      WHERE a.ucode = #UserCode# AND a.tocode = m.uCode AND a.type = 'Person')
      +
      (SELECT sum(b.send) FROM mpds_msg_count b
      WHERE b.uCode = m.uCode AND b.tocode = #UserCode# AND b.type = 'Person')
      as uIsUnilt
      FROM tbusers m
      <dynamic prepend="where">
        <isNotEmpty property="discussionCode" prepend="and">
          <isNotEmpty property="discussionName">
            (m.groupid = #discussionCode# or m.groupid = #discussionName#)
          </isNotEmpty>
          <isEmpty property="discussionName">
            m.groupid = #discussionCode#
          </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="dCode" prepend="and">
          m.dCode = #dCode#
        </isNotEmpty>
        <isNotEmpty property="UserStatus" prepend="and">
          m.`status` = #UserStatus#
        </isNotEmpty>
        <isNotEmpty property="UserName" prepend="and">
          (m.uCode like CONCAT('%',#UserName#,'%') or m.uName like CONCAT('%',#UserName#,'%') or m.deviceid = #UserName#)
        </isNotEmpty>
        <isNotEmpty property="page">
          order by m.`status` LIMIT #page#, #pageSize#
        </isNotEmpty>
      </dynamic>
    </select>

    <select id="select_audio_msg_person" parameterClass="record" resultClass="record">
      SELECT c.virtualId as uuid,
      c.fCode as FileCode,
      c.fName as FileName,
      c.fRelativePath as RecordingUrl,
      a.msgTime as RecordingTime,
      a.uName as sender,
      a.msgAbstract as second,
      a.msgFromType as fromType,
      a.msgToName as receiver
      FROM tbcasemessages a
      INNER JOIN tbFileDetails c on a.msgFile = c.fCode
      WHERE a.msgFromType = 'Person' AND a.msgType = 'Recording'
      <dynamic>
        <isNotEmpty property="sender">
          AND (a.uName = #sender# || a.uCode = #sender#)
        </isNotEmpty>
        <isNotEmpty property="startDt">
          <isNotEmpty property="endDt">
            AND a.msgTime BETWEEN #startDt# AND #endDt#
          </isNotEmpty>
        </isNotEmpty>
      </dynamic>
      ORDER BY a.msgTime desc
      LIMIT #page#, #pageSize#
    </select>

    <select id="select_audio_msg_group" parameterClass="record" resultClass="record">
      SELECT c.virtualId as uuid,
      c.fCode as FileCode,
      c.fName as FileName,
      c.fRelativePath as RecordingUrl,
      a.msgTime as RecordingTime,
      a.uName as sender,
      a.msgAbstract as second,
      a.msgFromType as fromType,
      a.msgToName as receiver
      FROM tbcasemessages a
      INNER JOIN tbFileDetails c on a.msgFile = c.fCode
      WHERE a.msgFromType = 'Group' AND a.msgType = 'Recording'
      <dynamic>
        <isNotEmpty property="sender">
          AND (a.msgToName = #sender# || a.msgToCode = #sender#)
        </isNotEmpty>
        <isNotEmpty property="startDt">
          <isNotEmpty property="endDt">
            AND a.msgTime BETWEEN #startDt# AND #endDt#
          </isNotEmpty>
        </isNotEmpty>
      </dynamic>
      ORDER BY a.msgTime desc
      LIMIT #page#, #pageSize#
    </select>

    <insert id="add_user_gps" parameterClass="userGpsData">
      INSERT INTO tbuserimdatas (isDel,LastModifyTime,uCode,csCode,latitude,longitude,positionName,altitude,speed,accelerationX,accelerationY)
      VALUES (#isDel#,#LastModifyTime#,#uCode#,#csCode#,#latitude#,#longitude#,#positionName#,#altitude#,#speed#,#accelerationX#,#accelerationY#)
    </insert>
    <update id="update_user_gps" parameterClass="userGpsData">
      UPDATE tbuserimdatas
      SET LastModifyTime = #LastModifyTime#,
      csCode = #csCode#,
      latitude = #latitude#,
      longitude = #longitude#,
      positionName = #positionName#,
      altitude = #altitude#,
      speed = #speed#,
      accelerationX = #accelerationX#,
      accelerationY = #accelerationY#
      WHERE uCode = #uCode#
    </update>
    <update id="update_user_status" parameterClass="userResult">
      UPDATE tbusers
      SET status = '在线',LYCID=UNIX_TIMESTAMP(now())*1000
      WHERE uCode = #uCode#
    </update>
    <select id="select_user_gps" parameterClass="userGpsData" resultClass="userGpsData">
      SELECT isDel,LastModifyTime,uCode,csCode,latitude,longitude,positionName,altitude,speed,accelerationX,accelerationY
      FROM tbuserimdatas
      WHERE uCode = #uCode#
    </select>

    <select id="select_appgroup_with_user_app" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid from tbdiscussiongroups a
      inner join tbusers u on a.discussionCode = u.groupid 
      where a.type = 'APP' and u.status='在线' and a.discussionCode = #groupid# limit 1
    </select>
    <select id="select_appgroup_with_user_pdt" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid from tbdiscussiongroups a
      inner join tbusers u on a.discussionCode = u.groupid 
      where a.type = 'APP' and u.status='在线' and a.relativegroupid = #groupid# limit 1
    </select>

    <select id="select_appgroup_app" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.relativegroupid as groupName from tbdiscussiongroups a
      where a.type = 'APP' and a.discussionCode = #groupid# limit 1
    </select>
    <select id="select_appgroup_pdt" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.relativegroupid as groupName from tbdiscussiongroups a
      where a.type = 'APP' and a.relativegroupid = #groupid# limit 1
    </select>
    
    <!-- PushMsg -->
    <select id="select_app_user_by_msgtocode" parameterClass="user" resultClass="userResult">
      select a.ID, a.uCode, a.rName, a.uName, a.uDuty, a.dCode, a.uHeadPortrait, a.dName, a.uDepartment, a.groupid, a.groupName, a.deviceid
      from tbusers a inner JOIN mpds_group_user b on a.uCode = b.account where b.groupid = #discussionCode# and a.devicetype = 'APP'
    </select>
    <select id="select_app_user_by_ucode" parameterClass="user" resultClass="userResult">
      select ID, uCode, rName, uName, uDuty, dCode, uHeadPortrait, dName,
             uDepartment, groupid, groupName, deviceid
      from tbusers where ucode = #UserCode# limit 1
    </select>
    <insert id="add_case_message" parameterClass="caseMsg">
      INSERT INTO tbcasemessages (ID, isDel, csCode, msgType, msgAbstract, msgFile, uCode, msgTime, uLatitude, uLongitude, uPositionName, msgFromType, msgToCode) 
      VALUES (#ID#, '0', #csCode#, #msgType#, #msgAbstract#, #msgFile#, #uCode#, #msgTime#, #uLatitude#, #uLongitude#, #uPositionName#, #msgFromType#, #msgToCode#)
    </insert>

    <select id="select_group_by_id" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.discussionName as groupName, a.type, a.dept, a.deptid from tbdiscussiongroups a
      where a.type = 'APP' and a.discussionCode = #groupid# limit 1
    </select>
    
    <!-- Data Manager -->
    <select id="select_group_by_type_and_id" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.discussionName as groupName from tbdiscussiongroups a
      where a.type = #type# and a.discussionCode = #groupid# LIMIT 1
    </select>
    <select id="select_group_by_type" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.discussionName as groupName from tbdiscussiongroups a
      where a.type = #type#
      <dynamic>
        <isNotEmpty property="groupid">
          and a.discussionCode like CONCAT('%',#groupid#,'%')
        </isNotEmpty>
      </dynamic>
      LIMIT #page#, #pageSize#
    </select>

    <insert id="insert_group" parameterClass="discussionGroup">
      INSERT INTO tbdiscussiongroups (isDel,createdTime,discussionCode,discussionName,createdUserCode,createdUserName,
      type,relativegroup,relativegroupid,dept,deptid,status,updatetime,clazz)
      VALUES (0, #createdTime#, #discussionCode#, #discussionName#, #createdUserCode#, #createdUserName#, #type#, #relativegroup#, #relativegroupid#, #dept#,
      #deptid#, #status#, #updatetime#, #csCode#)
    </insert>
    <update id="update_group" parameterClass="discussionGroup">
      UPDATE tbdiscussiongroups
      SET discussionName = #discussionName#,
      type = #type#,
      relativegroup = #relativegroup#,
      relativegroupid = #relativegroupid#,
      dept = #dept#,
      deptid = #deptid#,
      status = #status#,
      updatetime = #updatetime#,
      clazz = #csCode#
      WHERE discussionCode = #discussionCode#
    </update>
    <delete id="delete_group" parameterClass="discussionGroup">
      DELETE FROM tbdiscussiongroups WHERE discussionCode = #discussionCode#
    </delete>

    <select id="select_rank_by_id" parameterClass="rankGroup" resultClass="rankGroup">
      select a.rank, a.rankName from mpds_rank a
      where a.rank = #rank# LIMIT 1
    </select>
    <insert id="insert_rank" parameterClass="rankGroup">
      INSERT INTO mpds_rank (rank, rankName, createtime)
      VALUES (#rank#,#rankName#,now())
    </insert>
    <delete id="delete_rank" parameterClass="rankGroup">
      DELETE FROM mpds_rank WHERE rank = #rank#
    </delete>
    <update id="update_rank" parameterClass="rankGroup">
      UPDATE mpds_rank
      SET rankName = #rankName#
      WHERE rank = #rank#
    </update>

    <select id="select_group_no_rank" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.discussionName as groupName from tbdiscussiongroups a
      where a.type='APP' and a.discussionCode not in (select b.discussionCode from mpds_rank_group b where b.rank = #rankNo# )
      <dynamic>
        <isNotEmpty property="groupid">
          and a.discussionCode like CONCAT('%',#groupid#,'%')
        </isNotEmpty>
      </dynamic>
      order by a.createdTime desc LIMIT #page#, #pageSize#
    </select>

    <select id="select_group_with_rank" parameterClass="userGroup" resultClass="userGroup">
      select a.discussionCode as groupid, a.discussionName as groupName, a.rank as rankNo, a.rankName from mpds_rank_group a
      where a.rank = #rankNo# order by a.createtime desc LIMIT #page#, #pageSize#
    </select>

    <select id="select_rank_group" parameterClass="userGroup" resultClass="userGroup">
      select rank as rankNo, discussionCode as groupid from mpds_rank_group
      where rank = #rankNo# and discussionCode = #groupid# LIMIT 1
    </select>

    <insert id="insert_rank_group" parameterClass="userGroup">
      INSERT INTO mpds_rank_group (rank, rankName, discussionCode, discussionName, createtime)
      VALUES (#rankNo#,#rankName#,#groupid#,#groupName#,#createtime#)
    </insert>

    <delete id="delete_rank_group" parameterClass="userGroup">
      delete from mpds_rank_group
      where rank = #rankNo# and discussionCode = #groupid#
    </delete>

    <select id="select_group_user" parameterClass="userGroup" resultClass="userGroup">
      select groupName, groupid, type, account, name, dept, deptid, isdefault from mpds_group_user
      where account = #account#
      LIMIT #page#, #pageSize#
    </select>

    <insert id="insert_group_user" parameterClass="userGroup">
      insert into mpds_group_user (groupName, groupid, type, account, name, dept, deptid, createtime, updatetime, isdefault)
      values (#groupName#, #groupid#, #type#, #account#, #name#, #dept#, #deptid#, #createtime#, #updatetime#, #isdefault#)
    </insert>
    <delete id="delete_group_user" parameterClass="userGroup">
      delete from mpds_group_user
      where account = #account# and groupid = #groupid#
    </delete>
  </statements>
  
  <!-- 
  user_group
  (SELECT count(*) FROM tbcasemessages t WHERE t.msgToCode = a.groupid AND t.msgFromType = 'Group' AND t.msgType != 'Command' AND t.msgType != 'Recording') as uIsUnilt
  
  user
  (SELECT count(*) FROM tbCaseMessages a 
      WHERE a.uCode = #UserCode# AND a.msgToCode = m.uCode AND a.msgFromType = 'Person' AND a.msgType != 'Command' AND a.msgType != 'Recording')
      +
      (SELECT count(*) FROM tbCaseMessages b 
      WHERE b.uCode = m.uCode AND b.msgToCode = #UserCode# AND b.msgFromType = 'Person' AND b.msgType != 'Command' AND b.msgType != 'Recording')
      as uIsUnilt
  -->
  <!--
  <parameterMaps>
    <parameterMap id="get-employees-params">
      <parameter property="Id" column="DepartmentId" />
    </parameterMap>
   
  </parameterMaps>
  -->
  <!--
  <resultMaps>
    <resultMap id="map_user_result" class="GRGcms.Model.user_gps">
      <result property="id" column="id"/>
      <result property="account" column="account"/>
      <result property="longtitude" column="longitude"/>
      <result property="latitude" column="latitude"/>
      <result property="name" column="name"/>
      <result property="dept" column="dept"/>
      <result property="groupid" column="groupid"/>
      <result property="group" column="groupName"/>
      <result property="devicetype" column="devicetype"/>
      <result property="status" column="status"/>
    </resultMap>
    <resultMap id="map_pdt_result" class="GRGcms.Model.user_gps">
      <result property="id" column="id"/>
      <result property="account" column="account"/>
      <result property="name" column="name"/>
      <result property="dept" column="dept"/>
    </resultMap>
  </resultMaps>
  -->
  <resultMaps>
    <resultMap id="rank_result" class="rankGroup">
      <result property="rank" column="rank"/>
      <result property="rankName" column="rankName"/>
    </resultMap>
      
    <resultMap id="rank_group_result" class="rankGroup" groupBy="rank">
      <result property="rank" column="rank"/>
      <result property="rankName" column="rankName"/>
      <result property="groupList" resultMapping="GRGcms.Web.user_group_result"/>
    </resultMap>

    <resultMap id="user_group_result" class="userGroup">
      <result property="groupid" column="groupid"/>
      <result property="groupName" column="groupName"/>
      <result property="type" column="type"/>
      <!--
      <result property="account" column="account"/>
      <result property="name" column="name"/>
      <result property="dept" column="dept"/>
      <result property="deptid" column="deptid"/>
      -->
      <result property="isdefault" column="isdefault"/>
      <result property="related" column="related"/>
      <result property="uIsUnilt" column="uIsUnilt"/>
      <result property="userCount" column="userCount"/>
      <result property="relativegroupid" column="relativegroupid"/>
    </resultMap>
  </resultMaps>
</sqlMap>